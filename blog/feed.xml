<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Finagle blog</title>
  <id>https://finagle.github.io/blog</id>
  <link href="https://finagle.github.io/blog"/>
  <link href="https://finagle.github.io/blog/blog/feed.xml" rel="self"/>
  <updated>2021-05-28T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>☀️ May 2021 Release Notes - Version 21.5.0</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/05/28/release-notes/"/>
    <id>https://finagle.github.io/blog/2021/05/28/release-notes/</id>
    <published>2021-05-28T00:00:00Z</published>
    <updated>2021-06-01T10:04:41-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As we head into the summer months and longer days, we&amp;rsquo;ve got a new release of the Twitter CSL libraries.&lt;/p&gt;

&lt;h3&gt;NOTE&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve introduced a new case class validation library (util/util-validator) based on the Jakarta &lt;a href="https://beanvalidation.org/"&gt;Bean Validation specification&lt;/a&gt;. This library wraps the &lt;code&gt;Hibernate Validator &amp;lt;https://hibernate.org/validator/&amp;gt;&lt;/code&gt;__ reference implementation for validating case classes. Check out the &lt;a href="http://twitter.github.io/util/guide/util-validator/index.html"&gt;user guide documentation&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;&lt;a href="https://github.com/twitter/util/"&gt;Util&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  util-validator: Introduce new library for case class validations (akin to Java bean validation)
which follows the Jakarta &lt;a href="https://beanvalidation.org/"&gt;Bean Validation specification&lt;/a&gt; by wrapping
the Hibernate Validator library and thus supports jakarta.validation.Constraint annotations and
validators for annotating and validating fields of Scala case classes. &lt;a href="https://github.com/twitter/util/commit/5849d91c49d036300af9ebaf40511f27b18ecb94"&gt;5849d91c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-app: Introduce a Java-friendly API c.t.app.App#runOnExit(Runnable) and
c.t.app.App#runOnExitLast(Runnable) to allow Java 8 users to call c.t.app.App#runOnExit
and c.t.app.App#runOnExitLast with lambda expressions. &lt;a href="https://github.com/twitter/util/commit/c386ece8fb7c04e7d3526ff10d8c33f86787bb33"&gt;c386ece8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a href="https://github.com/twitter/scrooge/"&gt;Scrooge&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  scrooge-generator: Modify struct field names when they match Java keywords by adding
an underscore prefix to the field name. &lt;a href="https://github.com/twitter/scrooge/commit/a33de276a704a536f2cd7ea768acd327fd7d0103"&gt;a33de276&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a href="https://github.com/twitter/finagle/"&gt;Finagle&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-http2: Added c.t.f.http2.param.EnforceMaxConcurrentStreams which allows users to
configure http2 clients to buffer streams once a connection has hit the max concurrent stream
limit rather than rejecting them. A buffered_streams gauge has been added to track the
current number of buffered streams. &lt;a href="https://github.com/twitter/finagle/commit/c6d5f5205f5f0345bcf9ffdd08735ce7cd5bca94"&gt;c6d5f520&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-mux: Added support for TLS snooping to the mux protocol. This allows a thriftmux
server to start a connection as TLS or follow the existing upgrade pathway at the leisure of
the client. This also allows the server to support opportunistic TLS and still downgrade to
vanilla thrift. &lt;a href="https://github.com/twitter/finagle/commit/60705fd270a3ef85c2d31ae09626971cb12b77a8"&gt;60705fd2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-netty4: Added a new counter to keep track of the number of TLS connections that were
started via snooping. &lt;a href="https://github.com/twitter/finagle/commit/5569615e55c4b61f83da0df30e5a0bc1456d62f7"&gt;5569615e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-thrift: Thrift(Mux) clients and servers now fill in a c.t.f.Thrift.param.ServiceClass
stack param with the runtime class corresponding to a IDL-generated service stub.
&lt;a href="https://github.com/twitter/finagle/commit/04a2de2c3a4eeea5fd5d71d006dddee3e9f150ce"&gt;04a2de2c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Breaking API Changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: c.t.f.param.Logger has been removed. Use external configuration supported by
your logging backend to alter settings of com.twitter.finagle logger. &lt;a href="https://github.com/twitter/finagle/commit/99982cda7e460bc29f62947bc16bf1d973658c68"&gt;99982cda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Runtime Behavior Changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;finagle-http: Make handling of invalid URI consistent across client implementations. There are
behavioral inconsistencies amongst the current HTTP client implementations:&lt;/p&gt;

&lt;p&gt;Our HTTP/1.x clients allow for submitting requests that contain non-ASCII characters and
invalid character encoded sequences, while our HTTP/2 clients will either mangle
the URI and strip out non-ASCII characters within the Netty pipeline or result in an
UnknownChannelException when attempting to parse invalid character encoded sequences.
With this change, we now consistently propagate an InvalidUriException result, which
is marked as NonRetryable for all HTTP client implementations. All HTTP server implementations
maintain behavior of returning a 400 Bad Request response status, but now also correctly
handle invalid character encoded sequences. &lt;a href="https://github.com/twitter/finagle/commit/fa58caab1ffa82b2684e5cb1a7a64665f1adc932"&gt;fa58caab&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Bug Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: Failed writes on Linux due to a remote peer disconnecting should now
be properly seen as a c.t.f.ChannelClosedException instead of a
c.t.f.UnknownChannelException. &lt;a href="https://github.com/twitter/finagle/commit/6214e6acfe053308b69f07f79bed1918cfaf9ca4"&gt;6214e6ac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-http2: The streams gauge is now correctly added for http2 connections over TLS.
&lt;a href="https://github.com/twitter/finagle/commit/c6d5f5205f5f0345bcf9ffdd08735ce7cd5bca94"&gt;c6d5f520&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: c.t.f.n.NameTreeFactory will now discard empty elements in
c.t.f.NameTree.Unions with zero weight. &lt;a href="https://github.com/twitter/finagle/commit/cf73946df4273634ddd0786e2edd0ed508eb4207"&gt;cf73946d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-http: All HTTP server implementations consistently return a 400 Bad Request
response status when encountering a URI with invalid character encoded sequences.
&lt;a href="https://github.com/twitter/finagle/commit/fa58caab1ffa82b2684e5cb1a7a64665f1adc932"&gt;fa58caab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;&lt;a href="https://github.com/twitter/twitter-server/"&gt;Twitter Server&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;No Changes&lt;/p&gt;

&lt;h1&gt;&lt;a href="https://github.com/twitter/finatra/"&gt;Finatra&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;Fixed&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;finatra-jackson: Do not enforce CaseClassDeserializer deserialization semantics for a
field until after any deserializer annotation has been resolved. This fully allows a deserializer
to specify how to deserialize a field completely independent of the CaseClassDeserializer
requirements for fields. For example, if a user wanted to allow parsing of a JSON null value
into a null field instance value, they could define a custom deserializer to do so and annotate
the case class field with @JsonDeserialize(using = classOf[CustomNullableDeserializer]).&lt;/p&gt;

&lt;p&gt;Additionally, we fix a bug in how String case class fields are handled when the incoming JSON is
not a String-type. The current code incorrectly returns an empty string when the field value is
parsed into Jackson ContainerNode or ObjectNode types and an incorrect toString representation
for a PojoNode type. We now correctly represent the field value as a string in these cases to
deserialize into the case class field. &lt;a href="https://github.com/twitter/finatra/commit/715890a4715a0f58448de0a77a4c7b085449baa5"&gt;715890a4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finatra-jackson: Properly handle Scala enumeration fields wrapped in an Option during
deserialization failures in the CaseClassDeserializer#isScalaEnumerationType method.
&lt;a href="https://github.com/twitter/finatra/commit/a6cb5a10cacf4c6505583a99ffa53a6a7396a181"&gt;a6cb5a10&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Changed&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finatra-kafka: Deprecate c.t.finatra.kafka.consumers.TracingKafkaConsumer
as it only produced single-span traces and there is no way to propagate the TraceId back to the
caller without changing the entire API. Users should use the
c.t.finatra.kafka.consumers.KafkaConsumerTracer.trace method instead to enable tracing for
Kafka Consumers. Also added c.t.finatra.kafka.producers.KafkaProducerTraceAnnotator and
c.t.finatra.kafka.consumers.KafkaConsumerTraceAnnotator services which will can be used to add
custom trace annotations to the producer and consumer spans. &lt;a href="https://github.com/twitter/finatra/commit/bba748e6f2191d10bf9d8dba0f42fa5c3a270ddc"&gt;bba748e6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finatra (BREAKING API CHANGE): Update to use the new util/util-validator ScalaValidator for case
class field validations. We&amp;rsquo;ve removed the custom Finatra c.t.finatra.validation.Validator and
instead now use the c.t.util.validation.ScalaValidator. Constraint annotations and validator
implementations now use the standard jakarta.validation API interface classes instead of any
custom Finatra types. We&amp;rsquo;ve deprecated the custom Finatra constraints as they are duplicative of
already existing &amp;ldquo;standard&amp;rdquo; or otherwise provided constraints and validators. Additionally,
c.t.finatra.validation.ErrorCode is deprecated with no replacement. The same data carried can be
obtained via the standard jakarta.validation.ConstraintViolation[T].&lt;/p&gt;

&lt;p&gt;Adapting the Finatra framework to use the util/util-validator also includes the framework Jackson
integration. We&amp;rsquo;re also taking this opportunity to clean up the error reporting interface of
the CaseClassFieldMappingException to define a CaseClassFieldMappingException.Reason type to
replace the usage of the (removed) ValidationResult.Invalid type. The Reason carries a message
String as well as a CaseClassFieldMappingException.Detail which can be one of several possible
types including a CaseClassFieldMappingException.ValidationError which carries any failed validation
information including the emitted ConstraintViolation[T].&lt;/p&gt;

&lt;p&gt;Lastly, we are deprecating support for JSON serialization/deserialization of JodaTime fields in
case classes. This support will be dropped in an upcoming release. Users should prefer to use the
JDK 8 java.time classes and we will be adding support for these types in the Finatra Jackson
integration in the future. &lt;a href="https://github.com/twitter/finatra/commit/0731782d8a3d9f3046af4fec071156de37fefd83"&gt;0731782d&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finatra-jackson: (BREAKING API CHANGE) JsonLogging should use the lazy Scala SLF4J logger
and no longer return the passed in argument that&amp;rsquo;s logged as JSON. &lt;a href="https://github.com/twitter/finatra/commit/67252f30dfcba16ad5de012abb0ed81390fb63db"&gt;67252f30&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Spring Update 2021 🚲</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/05/06/winter-spring/"/>
    <id>https://finagle.github.io/blog/2021/05/06/winter-spring/</id>
    <published>2021-05-06T00:00:00Z</published>
    <updated>2021-06-01T10:04:41-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Hey Finaglers,&lt;/p&gt;

&lt;p&gt;Spring has sprung and the time has come ⏰ to update you on all of the exciting
changes we’ve been making. Here’s our quarterly review for Q1 2021, highlighting
our work in January, February, and March!&lt;/p&gt;

&lt;p&gt;Without further ado, here’s our recap:&lt;/p&gt;

&lt;p&gt;🎉 Our libraries all now cross-build with Scala 2.13! As of the 21.3.0 release,
we’ve dropped build support for 2.11, focusing on Scala 2.12+.&lt;/p&gt;

&lt;h4&gt;Finagle&lt;/h4&gt;

&lt;p&gt;Investing in our Offload Filter has paid large performance dividends.
And we are finding even more ways to make our services more performant! We’ve
introduced a new flag, c.t.f.offload.auto, that enables offloading functionality
with good defaults to avoid the tuning processes. Our latest efforts have
revolved around introducing an offload admission controller.&lt;/p&gt;

&lt;p&gt;Finagle has been migrated to make use of the new Backoff APIs. Microbenchmarks
that traverse the new implementation have shown a 52% allocation improvement
compared to the Stream based implementation.&lt;/p&gt;

&lt;p&gt;Finagle-Mysql has added support for opportunistic TLS! Mysql clients can fallback
to plain-text if the server does not support TLS connections.&lt;/p&gt;

&lt;p&gt;Kerberos authentication can be incorporated more naturally in Finagle http clients
and servers with built-in configuration APIs.&lt;/p&gt;

&lt;p&gt;Aperture eager connections is enabled by default for the aperture load
balancers! New configuration knobs were added to support eager connections in
balancers created due to request-level d-tabs.&lt;/p&gt;

&lt;p&gt;We’re always looking to improve our APIs and add features to improve your
experience with Finagle. This included introducing a new ResponseClassifier to
treat request timeouts as ignorable, useful for low-timeout clients where
responses are “best-effort”. Finagle’s “failures” counter was changed to be
created eagerly so the counter’s value is 0 in the absence of failures. Stay
tuned for more!&lt;/p&gt;

&lt;h4&gt;Finatra&lt;/h4&gt;

&lt;p&gt;ThriftMethodBuilder added support for including per-method retry
configuration. Finatra kafka-streams AsyncTransformer supports using thread pools
for CPU-bound workloads.&lt;/p&gt;

&lt;p&gt;We are committed to improving the user experience for our Finatra users and have
introduced the finatra/http-core project. Containing common artifacts for the
finatra/http-server and finatra/http-client project. The shared code will allow
us to provide greater feature parity between the client and server
implementations, as well as iterate and introduce new features for Finatra
services in a maintainable way.&lt;/p&gt;

&lt;p&gt;Till next time,&lt;/p&gt;

&lt;p&gt;Hamdi (on behalf of CSL)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>April 2021 Release Notes - Version 21.4.0</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/04/29/release-notes/"/>
    <id>https://finagle.github.io/blog/2021/04/29/release-notes/</id>
    <published>2021-04-29T00:00:00Z</published>
    <updated>2021-04-29T11:53:11-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Fresh off the press, &lt;strong&gt;April 2021 release&lt;/strong&gt; of Twitter CSL libraries. Enjoy!&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finagle/"&gt;Finagle&lt;/a&gt;&lt;/h3&gt;

&lt;h4&gt;New Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: Introduce a new ResponseClassifier (&amp;lsquo;IgnoreIRTEs&amp;rsquo;) that treats
com.twitter.finagle.IndividualRequestTimeoutExceptions as ResponseClass.Ignored.
This response classifier is useful when a client has set a super low RequestTimeout and
receiving a response is seen as &amp;lsquo;best-effort&amp;rsquo;. &lt;a href="https://github.com/twitter/finagle/commit/e897bd673a088c196e5ee4c8cc162e5adaa78583"&gt;e897bd67&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-mysql: Introduce support of opportunistic TLS to allow mysql clients
with enabled TLS to speak over encrypted connections with MySQL servers where
TLS is on, and fallback to plaintext connections if TLS is switched off on
the server side. &lt;a href="https://github.com/twitter/finagle/commit/e02495aa6ba58f3a6e4e73d81acc9f653ed78481"&gt;e02495aa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Runtime Behavior Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: The &amp;ldquo;failures&amp;rdquo; counter is changed to be created eagerly, when no failure
happens, the counter value is 0. &lt;a href="https://github.com/twitter/finagle/commit/d81a57c615b0486df8f34415d55e1812fd223c5b"&gt;d81a57c6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finatra/"&gt;Finatra&lt;/a&gt;&lt;/h3&gt;

&lt;h4&gt;Changed&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  http-core: Add support to build a multipart/form-data POST request in Finatra RequestBuilder.
&lt;a href="https://github.com/twitter/finatra/commit/8d2d8c58564135ce048ad5abb5c0daa07eb17ef1"&gt;8d2d8c58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra-kafka-streams: Update AsyncTransformer to support threadpools. &lt;a href="https://github.com/twitter/finatra/commit/0498a06a80bfbd1410d251cd47131d68490599f6"&gt;0498a06a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra-kafka-streams: Set kafka.producer.acks=all by default &lt;a href="https://github.com/twitter/finatra/commit/cce382d96714d1c8e38da052763f523a9c8485ae"&gt;cce382d9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/util/"&gt;Util&lt;/a&gt;&lt;/h3&gt;

&lt;h4&gt;Runtime Behavior Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  util-reflect: Memoize c.t.util.reflect.Types#isCaseClass computation. &lt;a href="https://github.com/twitter/util/commit/9319a68358146eae433ff9105c5734831652054a"&gt;9319a683&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Breaking API Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  util-stats: Added a methods c.t.f.stats.Counter#metadata: Metadata,
c.t.f.stats.Stat#metadata: Metadata, and c.t.f.stats.Gauge#metadata:
Metadata to make it easier to introspect the constructed metric. In
particular, this will enable constructing Expressions based on the full name
of the metric. If you don&amp;rsquo;t have access to a concrete Metadata instance
(like MetricBuilder) for constructing a Counter, Stat, or Gauge, you can
instead supply NoMetadata. &lt;a href="https://github.com/twitter/util/commit/9968ad4022f7d55fdb8c4df28e1059d2c5c0f634"&gt;9968ad40&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;New Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  util-stats: Added a com.twitter.finagle.stats.Metadata abstraction, that can
be either many com.twitter.finagle.stats.Metadata, a MetricBuilder, or a
NoMetadata, which is the null Metadata. This enabled constructing
metadata for counters that represent multiple counters under the hood.
&lt;a href="https://github.com/twitter/util/commit/9968ad4022f7d55fdb8c4df28e1059d2c5c0f634"&gt;9968ad40&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/twitter-server/"&gt;Twitter Server&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Change Metrics Metadata Endpoint to return a histogram&amp;rsquo;s metadata when queried using the /admin/metrics.json
full (suffixed) histogram name as the value for the name argument. &lt;a href="https://github.com/twitter/twitter-server/commit/7ffed11c5c38187b2d33ce9271c6b8a4f7e4fdf9"&gt;7ffed11c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/scrooge/"&gt;Scrooge&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;No Changes. Just the version bump.&lt;/p&gt;

&lt;h3&gt;Changelogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finagle/blob/finagle-21.4.0/CHANGELOG.rst"&gt;Finagle 21.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finatra/blob/finatra-21.4.0/CHANGELOG.rst"&gt;Finatra 21.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/util/blob/util-21.4.0/CHANGELOG.rst"&gt;Util 21.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/scrooge/blob/scrooge-21.4.0/CHANGELOG.rst"&gt;Scrooge 21.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/twitter-server/blob/twitter-server-21.4.0/CHANGELOG.rst"&gt;TwitterServer 21.4.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>CSL Quarterly Review, Winter/Spring 2021</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/03/31/quarterly/"/>
    <id>https://finagle.github.io/blog/2021/03/31/quarterly/</id>
    <published>2021-03-31T00:00:00Z</published>
    <updated>2021-06-01T10:04:41-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Daffodils are blooming, the snow is melting, spring is in the air&amp;hellip;and it&amp;rsquo;s time for another CSL update. The CSL team has been busy since our &lt;a href="https://finagle.github.io/blog/2020/06/04/winter-spring/"&gt;last&lt;/a&gt; quarterly / semiannual / epochly bulletin!&lt;/p&gt;

&lt;p&gt;Without further ado, here&amp;rsquo;s our Q4 2020 / Q1 2021 recap:&lt;/p&gt;

&lt;h2&gt;Shipped 🚢&lt;/h2&gt;

&lt;h3&gt;Finatra Validations Framework&lt;/h3&gt;

&lt;p&gt;Finatra Validation now &lt;a href="https://github.com/twitter/finatra/commit/19008194251ec1909ee6a2478ed0138bd33509e6"&gt;supports&lt;/a&gt; cascading validations on nested case classes.&lt;/p&gt;

&lt;h3&gt;More Robust Tracing Annotations&lt;/h3&gt;

&lt;p&gt;We shipped several changes focusing on more robust tracing annotations. This should help with latency and other performance investigations. Finagle now records errors and exceptions when spans complete, high-level HTTP status info, annotations for rate-limited requests, and more information about the process path. More details in the &lt;a href="https://finagle.github.io/blog/2021/02/10/release-notes/"&gt;February&lt;/a&gt; notes.&lt;/p&gt;

&lt;h3&gt;#bugfix: reading Java Thrift structs with bad field types will now throw an error&lt;/h3&gt;

&lt;p&gt;We fixed a discrepancy in how Scrooge generates Scala and Java code. If Scrooge encountered a field that had a type different from the expected type in a struct, the Java-generated code would skip the field and continue reading, causing corrupt records to slip by deserialization. Yikes! That&amp;rsquo;s been fixed, and now both the Java and Scala generated code will throw an exception.&lt;/p&gt;

&lt;h3&gt;Metrics Metadata Instrumentation (with &lt;a href="https://github.com/dannenberg"&gt;Matt Dannenberg&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;We continued instrumenting the /admin/metric_metadata.json endpoint, and it’s now ready to be used by customers.  Our first expected use cases are for fleet-wide analysis of services, and automatic configuration of Platform Layers.&lt;/p&gt;

&lt;h3&gt;Resharding in Partition-Aware ThriftMux Clients&lt;/h3&gt;

&lt;p&gt;We added support for resharding to Partition-Aware ThriftMux clients, so that it’s now possible to reshard your cluster without downtime by using our resharding primitives. &lt;/p&gt;

&lt;h3&gt;Offload Filter&lt;/h3&gt;

&lt;p&gt;Finagle&amp;rsquo;s Offload Filter is now faster and easier to use! Service owners can now enable the Offload Filter with a single on/off flag: -Dcom.twitter.finagle.offload.auto=true. &lt;/p&gt;

&lt;p&gt;How much you&amp;rsquo;ll benefit depends on your service, but expect improvements to both tail latencies and redline results. Internally, for example, one of our customers running on a dedicated host observed a 30% p99 latency improvement when compared to a vanilla (no offload enabled) config. 🎉&lt;/p&gt;

&lt;h2&gt;WIP &amp;amp; coming soon  🏗&lt;/h2&gt;

&lt;h3&gt;New Backoff API&lt;/h3&gt;

&lt;p&gt;Ye olde backoff API could lead to memory leaks for potentially infinite streams. We introduced a new Backoff API that works as a drop-in replacement for the old API, but without the footguns.&lt;/p&gt;

&lt;h3&gt;Unblocking Capacity Testing for Large Services&lt;/h3&gt;

&lt;p&gt;Today, Finagle interprets serverset weights separately from its loadbalancing algorithms. This creates problems for capacity-testing large services. Capacity testing can cause a single instance to receive a sudden influx of new connections, leading to distorted results or even a total inability to run tests. We&amp;rsquo;re promoting vector weights to be a first class concern of the Finagle loadbalancers to remediate this.&lt;/p&gt;

&lt;p&gt;&amp;hellip;and that&amp;rsquo;s all for now!&lt;/p&gt;

&lt;p&gt;Ĝis poste,
Bonnie (on behalf of CSL)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>🌷 March 2021 Release Notes - Version 21.3.0</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/03/30/release-notes/"/>
    <id>https://finagle.github.io/blog/2021/03/30/release-notes/</id>
    <published>2021-03-30T00:00:00Z</published>
    <updated>2021-04-29T10:20:32-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As the 🐻 animals 🐿️ awaken from hibernation, we too have awoken the 🐆 beast 🐅 with this release. Please enjoy!&lt;/p&gt;

&lt;h3&gt;NOTE&lt;/h3&gt;

&lt;p&gt;As we noted in the 21.2.0 release, we cross-build for Scala 2.12 and Scala 2.13 for all of our projects and we have dropped support for Scala 2.11
with this release. For Finatra users, please pay special attention to the notes, as the &lt;code&gt;finatra/http&lt;/code&gt; project has been renamed to &lt;code&gt;finatra/http-server&lt;/code&gt;,
&lt;code&gt;finatra/httpclient&lt;/code&gt; has been moved to &lt;code&gt;finatra/http-client&lt;/code&gt; for consistency, and artifacts that are meant to be shared between the server and 
experimental &lt;code&gt;finatra/http-client&lt;/code&gt; have moved to &lt;code&gt;finatra/http-core&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finagle/"&gt;Finagle&lt;/a&gt;&lt;/h3&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: Added value ForceWithDtab to flag
-com.twitter.finagle.loadbalancer.exp.apertureEagerConnections that forces the
aperture load balancer to eagerly connect, even in staging environments where
Dtab locals are set. &lt;a href="https://github.com/twitter/finagle/commit/9dab522df6c953872d19089f8756904d076aaf77"&gt;9dab522d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: Introduce a new Backoff to create backoffs based on varies strategies, where
backoffs are calculated on the fly, instead of being created once and memoized in a Stream.
Also introduced Backoff.fromStream(Stream) and Backoff.toStream to help with migration to
the new API. &lt;a href="https://github.com/twitter/finagle/commit/91d24c33bd7587dad9a3d5e00702d1fbffaa56f3"&gt;91d24c33&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-netty4: Upgrade to Netty 4.1.59.Final and TcNative 2.0.35.Final. &lt;a href="https://github.com/twitter/finagle/commit/ee6ced9153649cf99159614de962a2f3ba0811fa"&gt;ee6ced91&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-http: Integrate Kerberos authentication filter to finagle http client and server.
&lt;a href="https://github.com/twitter/finagle/commit/e3bfa0c33bb5712d6eb679062efa1619fbeba8fc"&gt;e3bfa0c3&lt;/a&gt; &lt;a href="https://github.com/twitter/finagle/commit/eefc21c87026d8a641987b7bd332a03ec3c06d7b"&gt;eefc21c8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: Provided c.t.f.ssl.TrustCredentials.X509Certificates to enable directly
passing X509Certificate instead of passing a File. &lt;a href="https://github.com/twitter/finagle/commit/61c2a59642c9ccab682d91abe7e274824c6dddf9"&gt;61c2a596&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Breaking API Changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle: Builds are now only supported for Scala 2.12+ &lt;a href="https://github.com/twitter/finagle/commit/8a48eab7e55084559651f8c3e66e657f39709d3e"&gt;8a48eab7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: Changed flag -com.twitter.finagle.loadbalancer.exp.apertureEagerConnections&amp;quot;
from having Boolean values true or false to EagerConnectionsType` values Enable,
Disable, and ForceWithDtab. &lt;a href="https://github.com/twitter/finagle/commit/9dab522df6c953872d19089f8756904d076aaf77"&gt;9dab522d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-mysql: The constructor of c.t.f.mysql.transport.MysqlBufReader now takes an underlying
c.t.io.ByteReader. Prior uses of the constructor, which took a c.t.io.Buf, should migrate to
using c.t.f.mysql.transport.MysqlBufReader.apply instead. &lt;a href="https://github.com/twitter/finagle/commit/ad73f92d88dd482f6198044fd5b98044b446f82d"&gt;ad73f92d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-base-http: Kerberos jaas config KerberosConfiguration is replaced with ServerKerberosConfiguration
and ClientKerberosConfiguration concrete classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Runtime Behavior Changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle: Revert to scala version 2.12.12 due to &lt;a href="https://github.com/scoverage/sbt-scoverage/issues/319"&gt;https://github.com/scoverage/sbt-scoverage/issues/319&lt;/a&gt;
&lt;a href="https://github.com/twitter/finagle/commit/c2db97c2b84b8ab54c1b23b4d8304b98a77728fa"&gt;c2db97c2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle: Bump scala version to 2.12.13 &lt;a href="https://github.com/twitter/finagle/commit/b8e4e0acc896adc4a426beaf98b41d29edbb9b16"&gt;b8e4e0ac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: Move helper tracing methods like traceLocal in Trace into the Tracing class. This
allows cheaper use of these APIs by first capturing a Trace via Trace#apply, avoiding the extra lookups
that will add overhead on the request path. &lt;a href="https://github.com/twitter/finagle/commit/ec0097cd17e46e192d7e80444cdda1fcb0961407"&gt;ec0097cd&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  finagle-core: c.t.finagle.InetResolver, c.t.finagle.builder.ClientBuilder,
c.t.finagle.liveness.FailureAccrualFactory, c.t.finagle.liveness.FailureAccrualPolicy,
c.t.finagle.param.ClientParams, c.t.finagle.param.SessionQualificationParams,
c.t.finagle.service.FailFastFactory, c.t.finagle.service.RequeueFilter,
c.t.finagle.service.Retries, c.t.finagle.service.RetryFilter, and
c.t.finagle.service.RetryPolicy will accept the new c.t.finagle.service.Backoff to create
backoffs. Services can convert a Stream to/from a Backoff with Backoff.fromStream(Stream)
and Backoff.toStream. &lt;a href="https://github.com/twitter/finagle/commit/91d24c33bd7587dad9a3d5e00702d1fbffaa56f3"&gt;91d24c33&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finagle-core: remove the com.twitter.finagle.loadbalancer.apertureEagerConnections Toggle and
change the default behavior to enable eager connections for c.t.f.loadbalancer.ApertureLeastLoaded
and c.t.f.loadbalancer.AperturePeakEwma load balancers. The state of the
com.twitter.finagle.loadbalancer.apertureEagerConnections GlobalFlag now also defaults to enable
this feature (Enable. You can disable this feature for all clients via setting the
com.twitter.finagle.loadbalancer.apertureEagerConnections GlobalFlag to Disable for your process.
(i.e. -com.twitter.finagle.loadbalancer.apertureEagerConnections=Disable).
&lt;a href="https://github.com/twitter/finagle/commit/ef8d536e4e781cf953545a419b4da1797430ba0d"&gt;ef8d536e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Deprecations&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-core: Backoff.fromJava is marked as deprecated, since the new Backoff is java-friendly.
For services using Stream.iterator on the old Backoff, please use the new API
Backoff.toJavaIterator to acquire a java-friendly iterator. &lt;a href="https://github.com/twitter/finagle/commit/91d24c33bd7587dad9a3d5e00702d1fbffaa56f3"&gt;91d24c33&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finatra/"&gt;Finatra&lt;/a&gt;&lt;/h3&gt;

&lt;h1&gt;Added&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  inject-thrift-client: Add per-method retry configuration withMaxRetries in
com.twitter.inject.thrift.ThriftMethodBuilder for customizing configureServicePerEndpoint.
&lt;a href="https://github.com/twitter/finatra/commit/be9f27c8c9eb5f16c4b3e0199f3e697058766745"&gt;be9f27c8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Breaking API Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  finatra: Deprecate c.t.inject.utils.AnnotationUtils, users should instead use
c.t.util.reflect.Annotations from com.twitter:util-reflect. Deprecate
c.t.finatra.utils.ClassUtils, users should instead use either
c.t.util.reflect.Classes#simpleName, c.t.util.reflect.Types#isCaseClass or
c.t.util.reflect.Types#notCaseClass from com.twitter:util-reflect. &lt;a href="https://github.com/twitter/finatra/commit/291d1b781b8fb2e079e781e34a609c6222764650"&gt;291d1b78&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Builds are now only supported for Scala 2.12+ &lt;a href="https://github.com/twitter/finatra/commit/5f08f4694389b277917f2449821d08c78d63b583"&gt;5f08f469&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Changed&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  finatra: Revert to scala version 2.12.12 due to &lt;a href="https://github.com/scoverage/sbt-scoverage/issues/319"&gt;https://github.com/scoverage/sbt-scoverage/issues/319&lt;/a&gt;
&lt;a href="https://github.com/twitter/finatra/commit/6f74aedb317eee2873c646373886710d396bcba2"&gt;6f74aedb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Bump scala version to 2.12.13 &lt;a href="https://github.com/twitter/finatra/commit/029c7500045ce3e63d7afca67d4fcb5f1ac76689"&gt;029c7500&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Move com.twitter.finatra.http.{jsonpatch,request} from the finatra/http-server project to
finatra/http-core project. Please update your build artifact references accordingly.
&lt;a href="https://github.com/twitter/finatra/commit/f8a810b27adc5c7eb09ab37838f72d5625ee4bf2"&gt;f8a810b2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-server,http-core,jackson,thrift,validation: Update to use c.t.util.reflect.Types
in places for TypeTag reflection. &lt;a href="https://github.com/twitter/finatra/commit/c132a053193991a99798ff0f405420a5adb8e648"&gt;c132a053&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Move c.t.finatra.http.{context,exceptions,response} from the finatra/http-server project
to finatra/http-core project. Please update your build artifact references accordingly.
&lt;a href="https://github.com/twitter/finatra/commit/9f6c9405b9b5dfff28d350401023ea5a9c5241a1"&gt;9f6c9405&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Move c.t.finatra.http.streaming from the finatra/http-server project to
finatra/http-core project. Please update your build artifact references accordingly.
&lt;a href="https://github.com/twitter/finatra/commit/d454fd0e24620b6325e34e920e43cb86d6cbbe32"&gt;d454fd0e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-core: Introduce c.t.finatra.http.marshalling.MessageBodyManager#builder for creating an immutable
c.t.finatra.http.marshalling.MessageBodyManager. The MessageBodyManager&amp;rsquo;s constructor is now private.
&lt;a href="https://github.com/twitter/finatra/commit/d8886dabc7bb29aa5e4a267886430f85d719d567"&gt;d8886dab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-server: Move c.t.finatra.http.modules.MessageBodyFlagsModule to
c.t.finatra.http.marshalling.modules.MessageBodyFlagsModule. &lt;a href="https://github.com/twitter/finatra/commit/0cd97c798058d0e355cc57269bfecc8d175f503f"&gt;0cd97c79&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  validation: Remove deprecated constraint type aliases under com.twitter.finatra.validation, users
should prefer the actual constraint annotations at com.twitter.finatra.validation.constraints.
&lt;a href="https://github.com/twitter/finatra/commit/498ebe4a4c9ef005105ff84247286253487ee9bc"&gt;498ebe4a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  jackson: Remove deprecated com.twitter.finatra.json.utils.CamelCasePropertyNamingStrategy,
users should prefer to use PropertyNamingStrategy#LOWER_CAMEL_CASE or an equivalent directly.
Also remove the deprecated com.twitter.finatra.json.annotations.JsonCamelCase, users should
use the @JsonProperty or @JsonNaming annotations or an appropriately configured
Jackson PropertyNamingStrategy instead. &lt;a href="https://github.com/twitter/finatra/commit/da836c5593edcfb9b2f961d2c503a3c660b3dd6b"&gt;da836c55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  inject-core: (BREAKING API CHANGE) Rename c.t.inject.TwitterModule.closeOnExit to onExit so
it mirrors the API from c.t.inject.App. &lt;a href="https://github.com/twitter/finatra/commit/b8f00879bc3542e0e68f523c23ef46e4444f8d7b"&gt;b8f00879&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-client: Remove deprecated c.t.finatra.httpclient.modules.HttpClientModule.
Use c.t.finatra.httpclient.modules.HttpClientModuleTrait instead.
&lt;a href="https://github.com/twitter/finatra/commit/333c782a43e1feace4d8b0ebd187d74ce3b52a48"&gt;333c782a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-client: Remove deprecated c.t.finatra.httpclient.RichHttpClient. Use c.t.finagle.Http.Client
or c.t.finatra.httpclient.modules.HttpClientModuleTrait instead. Additionally,
c.t.finatra.httpclient.modules.HttpClientModule.provideHttpService has been removed. Use
c.t.finatra.httpclient.modules.HttpClientModuleTrait.newService(injector, statsReceiver)
instead. &lt;a href="https://github.com/twitter/finatra/commit/2af18ede436b229d5eb9a85fefa36ff10ae7f060"&gt;2af18ede&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Move c.t.finatra.http.fileupload from the finatra/http-server project to
finatra/http-core project. Please update your build artifact references accordingly.
&lt;a href="https://github.com/twitter/finatra/commit/8b0ea169bfd52735b95d271265b2f5396bc70a1c"&gt;8b0ea169&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  http-client: Remove deprecated method get from c.t.finatra.httpclient.HttpClient.
Use HttpClient&amp;rsquo;s execute instead. &lt;a href="https://github.com/twitter/finatra/commit/eada0515b447c863c80e411be486e575b4baf2d2"&gt;eada0515&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Create the finatra/http-core project, which is meant to contain common artifacts
for the finatra/http-server and finatra/http-client project. As part of this
change, the com.twitter.finatra.httpclient.RequestBuilder has been deprecated
and should be updated to reference com.twitter.finatra.http.request.RequestBuilder.
&lt;a href="https://github.com/twitter/finatra/commit/5e3da63163c54e0eee7901e7b2076890cd301ab1"&gt;5e3da631&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Rename the finatra/httpclient project to finatra/http-client. Please update your
build artifact references (i.e. SBT, Maven) to use &amp;ldquo;finatra-http-client&amp;rdquo;.
&lt;a href="https://github.com/twitter/finatra/commit/c0b0ae61810dd1736cd4800cf3499bce8bb819d9"&gt;c0b0ae61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  kafkaStreams: Switch the default Kafka client and Kafka Stream client to version 2.4.1.
&lt;a href="https://github.com/twitter/finatra/commit/d23674852345f777178966c108c794c409a01f56"&gt;d2367485&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  finatra: Rename the finatra/http project to finatra/http-server. Please update your
build artifact references (i.e. SBT, Maven) to use &amp;ldquo;finatra-http-server&amp;rdquo;. See the
&lt;a href="https://twitter.github.io/finatra/user-guide/index.html"&gt;Finatra User&amp;rsquo;s Guide&lt;/a&gt;
&lt;a href="https://github.com/twitter/finatra/commit/2cb398e6c6334fd6c37619024a0a8be1103e3a61"&gt;2cb398e6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/util/"&gt;Util&lt;/a&gt;&lt;/h3&gt;

&lt;h1&gt;Runtime Behavior Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  util: Revert to scala version 2.12.12 due to &lt;a href="https://github.com/scoverage/sbt-scoverage/issues/319"&gt;https://github.com/scoverage/sbt-scoverage/issues/319&lt;/a&gt;
&lt;a href="https://github.com/twitter/util/commit/c075bb13efb2b051f9963da323c37abb0b6a9ba9"&gt;c075bb13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util: Bump scala version to 2.12.13 &lt;a href="https://github.com/twitter/util/commit/b2b94e974dcbf478552631633b0cb358aa8cf125"&gt;b2b94e97&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Breaking API Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  util: Rename c.t.util.reflect.Annotations#annotationEquals to c.t.util.reflect.Annotations#equals
and c.t.util.reflect.Types.eq to c.t.util.reflect.Types.equals. &lt;a href="https://github.com/twitter/util/commit/e90c5c61b32b7227c763b22db435b96c5f8a816e"&gt;e90c5c61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util: Builds are now only supported for Scala 2.12+ &lt;a href="https://github.com/twitter/util/commit/2c90e2fc9e04eb26ee564c664fd7355380df2575"&gt;2c90e2fc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-reflect: Remove deprecated c.t.util.reflect.Proxy. There is no library replacement.
&lt;a href="https://github.com/twitter/util/commit/62a3169da0107aeec6205d0e1bbe49addc22d7cd"&gt;62a3169d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-security: Renamed com.twitter.util.security.PemFile to c.t.u.security.PemBytes, and
changed its constructor to accept a string and a name. The main change here is that we assume
the PEM-encoded text has been fully buffered. To migrate, please use the helper method on the
companion object, PemBytes#fromFile. Note that unlike before with construction, we read from
the file, so it&amp;rsquo;s possible for it to throw. &lt;a href="https://github.com/twitter/util/commit/5876adfc7038dc2e77e4b19a176f6f3faa3fd1ac"&gt;5876adfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;New Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  util-reflect: Add c.t.util.reflect.Annotations a utility for finding annotations on a class and
c.t.util.reflect.Classes which has a utility for obtaining the simpleName of a given class
across JDK versions and while handling mangled names (those with non-supported Java identifier
characters). Also add utilities to determine if a given class is a case class in
c.t.util.reflect.Types. &lt;a href="https://github.com/twitter/util/commit/95c45f7107fb840a0e0ffa89ef3045f208ba4dd1"&gt;95c45f71&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-reflect: Add c.t.util.reflect.Types, a utility for some limited reflection based
operations. &lt;a href="https://github.com/twitter/util/commit/7e32800ae6345bd02bf62286ce2e9555132990d7"&gt;7e32800a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-core: c.t.io now supports creating and deconstructing unsigned 128-bit buffers
in Buf. &lt;a href="https://github.com/twitter/util/commit/955754d422b7a477113841c6eb2fa77996c30244"&gt;955754d4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-core: c.t.io.ProxyByteReader and c.t.io.ProxyByteWriter are now public. They are
useful for wrapping an existing ByteReader or ByteWriter and extending its functionality
without modifying the underlying instance. &lt;a href="https://github.com/twitter/util/commit/35abecad4622efb8c13ef5607dbb09f70c023e4a"&gt;35abecad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  util-core: Provided c.t.u.security.X509CertificateDeserializer to make it possible to directly
deserialize an X509Certificate even if you don&amp;rsquo;t have a file on disk. Also provided
c.t.u.security.X509TrustManagerFactory#buildTrustManager to make it possible to directly
construct an X509TrustManager with an X509Certificate instead of passing in a File.
&lt;a href="https://github.com/twitter/util/commit/5876adfc7038dc2e77e4b19a176f6f3faa3fd1ac"&gt;5876adfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/scrooge/"&gt;Scrooge&lt;/a&gt;&lt;/h3&gt;

&lt;h1&gt;Runtime Behavior Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  scrooge: Revert to scala version 2.12.12 due to &lt;a href="https://github.com/scoverage/sbt-scoverage/issues/319"&gt;https://github.com/scoverage/sbt-scoverage/issues/319&lt;/a&gt;
&lt;a href="https://github.com/twitter/scrooge/commit/e67edc0c6572fa2438aae15e7c44c5e44ee4160c"&gt;e67edc0c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  scrooge: Bump scala version to 2.12.13 &lt;a href="https://github.com/twitter/scrooge/commit/3864106d4d84b65bb02761ca176c7640d9a678fe"&gt;3864106d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Breaking API Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  scrooge: Builds are now only supported for Scala 2.12+ &lt;a href="https://github.com/twitter/scrooge/commit/72f5a0a07b145f82a892c8117cc57a7c2dc5282a"&gt;72f5a0a0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/twitter-server/"&gt;TwitterServer&lt;/a&gt;&lt;/h3&gt;

&lt;h1&gt;Breaking API Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  com.twitter.server.util.JsonConverter is divided into two Json mappers, JsonConverter
and AdminJsonConverter. JsonConverter keeps the minimum configuration, for json mapping
to/from twitter-server admin endpoints, AdminJsonConverter is configured to do so.
&lt;a href="https://github.com/twitter/twitter-server/commit/c90fa00caebab901ac786e320de681bca43447c8"&gt;c90fa00c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  Json.scala and JsonConverter are merged, removed the Json.deserialize() methods.
&lt;a href="https://github.com/twitter/twitter-server/commit/c90fa00caebab901ac786e320de681bca43447c8"&gt;c90fa00c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Runtime Behavior Changes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  Revert to scala version 2.12.12 due to &lt;a href="https://github.com/scoverage/sbt-scoverage/issues/319"&gt;https://github.com/scoverage/sbt-scoverage/issues/319&lt;/a&gt;
&lt;a href="https://github.com/twitter/twitter-server/commit/869b18639246f1995682dcd734581320db462943"&gt;869b1863&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  Bump scala version to 2.12.13 &lt;a href="https://github.com/twitter/twitter-server/commit/8d6cc59de1270be5f957d577193597eceb2639e5"&gt;8d6cc59d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  Builds are now only supported for Scala 2.12+ &lt;a href="https://github.com/twitter/twitter-server/commit/a9340873b3231357ef308620cf4bac68ea0f7124"&gt;a9340873&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Changelogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finagle/blob/finagle-21.3.0/CHANGELOG.rst"&gt;Finagle 21.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finatra/blob/finatra-21.3.0/CHANGELOG.rst"&gt;Finatra 21.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/util/blob/util-21.3.0/CHANGELOG.rst"&gt;Util 21.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/scrooge/blob/scrooge-21.3.0/CHANGELOG.rst"&gt;Scrooge 21.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/twitter-server/blob/twitter-server-21.3.0/CHANGELOG.rst"&gt;TwitterServer 21.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>☃️ February 2021 Release Notes - Version 21.2.0</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2021/02/10/release-notes/"/>
    <id>https://finagle.github.io/blog/2021/02/10/release-notes/</id>
    <published>2021-02-10T00:00:00Z</published>
    <updated>2021-04-29T10:15:13-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Depends on which part of this planet you are in, you may grab a hot drink or bask in the sunshine. Here is our short and sweet February release.&lt;/p&gt;

&lt;h3&gt;NOTE&lt;/h3&gt;

&lt;p&gt;All of our libraries are cross-building with Scala 2.13 in this release! Starting from the March Release, we will say good bye to Scala 2.11.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finagle/"&gt;Finagle&lt;/a&gt;&lt;/h3&gt;

&lt;h4&gt;New Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;finagle-zipkin-core: Record &lt;code&gt;zipkin.sampling_rate&lt;/code&gt; annotation to track sampling
rate at trace roots. &lt;a href="https://github.com/twitter/finagle/commit/2269eb6b1a2e9290a5e17bd4283babb9a78f64e5"&gt;2269eb6b&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finagle-core: Added variant of &lt;code&gt;c.t.f.Address.ServiceFactory.apply&lt;/code&gt; that does not require
specifying &lt;code&gt;c.t.f.Addr.Metadata&lt;/code&gt; and defaults to &lt;code&gt;c.t.f.Addr.Metadata.empty&lt;/code&gt;. &lt;a href="https://github.com/twitter/finagle/commit/11971f0f5ac611984e8f68890b209a739445b156"&gt;11971f0f&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finagle-core: Added variant of &lt;code&gt;c.t.f.Name.bound&lt;/code&gt; which takes a &lt;code&gt;c.t.f.Service&lt;/code&gt; as a parameter.
Tying a &lt;code&gt;Name&lt;/code&gt; directly to a &lt;code&gt;Service&lt;/code&gt; can be extremely useful for testing the functionality
of a Finagle client. &lt;a href="https://github.com/twitter/finagle/commit/1422ffd5b35cfe01374b90122b671b2c69043ad7"&gt;1422ffd5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finagle-mux: Added variant of &lt;code&gt;c.t.f.mux.Request.apply&lt;/code&gt; and &lt;code&gt;c.t.f.mux.Requests.make&lt;/code&gt; which takes
only the body of the &lt;code&gt;Request&lt;/code&gt; (in the form of &lt;code&gt;c.t.io.Buf&lt;/code&gt;) as a parameter. This is useful for
when the path value of a &lt;code&gt;Request&lt;/code&gt; is not used by the server (e.g. testing). &lt;a href="https://github.com/twitter/finagle/commit/3ca463044cddf936eb4f79a50f63c6ddf4e5743b"&gt;3ca46304&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Runtime Behavior Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  finagle-memcached: The log level of messages pertaining to whether a Memcached client is using the
older non-partitioned or the newer partitioned version has been lowered. These messages are no
longer written at an &amp;lsquo;info&amp;rsquo; level. &lt;a href="https://github.com/twitter/finagle/commit/4bce560aa1773964c5acbd16142763a697aa873f"&gt;4bce560a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/twitter/finatra/"&gt;Finatra&lt;/a&gt;&lt;/h3&gt;

&lt;h4&gt;Changed&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;finatra: all subprojects cross-building with 2.13.1. &lt;a href="https://github.com/twitter/finatra/commit/7deb11535e5c9eb0787326e64dc44bf060b935df"&gt;7deb1153&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafkaStreams: Enables cross-build for 2.13.1 for projects kafkaStreamsStaticPartitioning,
kafkaStreamsPrerestore, and kafkaStreamsQueryableThrift. &lt;a href="https://github.com/twitter/finatra/commit/c9e5bda15a01b5b59daa45be2ea15d50fa999e63"&gt;c9e5bda1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Changelogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finagle/blob/finagle-21.2.0/CHANGELOG.rst"&gt;Finagle 21.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/util/blob/util-21.2.0/CHANGELOG.rst"&gt;Util 21.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/scrooge/blob/scrooge-21.2.0/CHANGELOG.rst"&gt;Scrooge 21.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/twitter-server/blob/twitter-server-21.2.0/CHANGELOG.rst"&gt;TwitterServer 21.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finatra/blob/finatra-21.2.0/CHANGELOG.rst"&gt;Finatra 21.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
